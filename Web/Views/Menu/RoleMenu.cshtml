@{
    ViewBag.Title = "角色菜单权限设置";
    this.Layout = "~/Views/Shared/IndexTemp.cshtml";
}

@section OperationContent{
    <div data-options="region:'west',split:true" style="width: 250px" title="角色列表">
        <ul id="roleTree" class="easyui-tree" data-options="method:'get',animate:true"></ul>
    </div>
}


@*    <div class="easyui-layout" style="width: 100%; height: 500px;">
        <div data-options="region:'center',iconCls:'icon-ok'" title="用户菜单权限设置">
            <a href="#" class="easyui-linkbutton" onclick="getChecked()" style="float: right; margin: 10px">保存配置</a>
            <div class="easyui-layout" data-options="fit:true">
                <div data-options="region:'west',split:true,border:false" style="width: 250px">
                    <ul id="roleTree" class="easyui-tree" data-options="method:'get',animate:true"></ul>
                </div>
                <div data-options="region:'center',split:true,border:false">
                    <ul id="menuTree" class="easyui-tree" data-options="checkbox:true,method:'get',animate:true"></ul>
                </div>
            </div>
        </div>
    </div>*@

@section scriptsFooter{
    <script type="text/javascript">
        
       
        //选中所有
        function CheckAll() {
            $("input[type='checkbox']").each(function () {
                $(this).attr("checked", true);
            });
        }

        //取消选中

        function ClearChecked() {
            $("input[type='checkbox']").each(function () {
                $(this).attr("checked", false);
            });
        }

        //保存当前角色菜单

        function Save() {
            var datas = '';
            $("input[type='checkbox']").each(function () {
                if ($(this).is(":checked")) {
                    if (datas != '')
                        datas += ',';
                    datas += $(this).attr('id');
                }

            });
            var postData = {
                'sysId': sltRole.id,
                'privilegeMaster': 11,
                'menus': datas
            };

            $.post('@Url.Action("UpdatePrivilege", "RestApi")', postData,
                function (data) {
                    if (data) {
                        alert("配置成功");
                    } else {
                        alert("配置失败");
                    }
                });
        }

        //初始化时加载角色列表和点击事件
        var sltRole;
        $('#roleTree').tree({
            url: '@Url.Action("GetRolesListTree", "RestApi")' + "?" + new Date().getTime(),
            onClick: function (node) {
                //$('#fixedGrid').datagrid('clearSelections').datagrid('clearChecked');
                sltRole = node;
                $('#fixedGrid').treegrid({
                    url: '@Url.Action("GetMenusPrivilegeTreeForRole", "RestApi")' + "?id=" + sltRole.id + "?" + new Date().getTime(),
                    idField: 'id',
                    treeField: 'text',
                    singleSelect: true,
                    checkOnSelect: false,
                    selectOnCheck: false,
                    columns: [[
                        {
                            field: 'text',
                            title: '名称',
                            width: 200,
                            formatter: function (value, rec) {
                                if (value) {
                                    return '<input id="' + rec.id + '" type="checkbox">' + (value);
                                }
                            }
                        },
                        { field: 'link', title: '链接', width: 200 },
                        {
                            field: 'buttons',
                            title: '操作',
                            fit: true,
                            formatter: formatOperate
                        }
                    ]],
                    onLoadSuccess: function (row, data) {
                        addToolBar();
                        if (data) {
                            $.each(data, function (index, item) {
                                if (item.checked) {
                                    $('#' + item.id).attr("checked", true);
                                    SelectCheckData(item);
                                }
                            });
                        }
                        
                    }
                });
            }
        });
        
        //递归选中初始化加载的checked数据

        function SelectCheckData(data) {
            if (data != null) {
                if (data.children != null) {
                    $.each(data.children, function (i, a) {
                        if (a != null) {
                            if (a.checked) {
                                $('#' + a.id).attr("checked", true);
                                SelectCheckData(a);
                            }
                        }
                    });
                }
                if (data.buttons != null) {
                    $.each(data.buttons, function (i, a) {
                        if (a != null) {
                            if (a.checked) {
                                $('#' + a.id).attr("checked", true);
                                SelectCheckData(a);
                            }
                        }
                    });
                }

            }
        }

        function formatOperate(value, rowData, rowIndex) {
            var oper = "";
            if (rowData.buttons != null) {
                $.each(rowData.buttons, function (i, v) {
                    var content;
                    if (v.checked) {
                        content = "  <input type='checkbox' checked='checked' class='{0}' id='{1}'/> {2}";
                    } else {
                        content = "  <input type='checkbox' class='{0}' id='{1}'/> {2}";
                    }
                    oper += content.format(rowData.id, v.id, v.text);
                    //console.log(v);
                    //console.log(rowData);
                    //console.log(rowIndex);
                });
            }
            return oper;
        }

        String.prototype.format = function (args) {
            var result = this;
            if (arguments.length > 0) {
                if (arguments.length == 1 && typeof (args) == "object") {
                    for (var key in args) {
                        if (args[key] != undefined) {
                            var reg = new RegExp("({" + key + "})", "g");
                            result = result.replace(reg, args[key]);
                        }
                    }
                } else {
                    for (var i = 0; i < arguments.length; i++) {
                        if (arguments[i] != undefined) {
                            //var reg = new RegExp("({[" + i + "]})", "g");//这个在索引大于9时会有问题，谢谢何以笙箫的指出
                            var reg = new RegExp("({)" + i + "(})", "g");
                            result = result.replace(reg, arguments[i]);
                        }
                    }
                }
            }
            return result;
        };

    </script>
}
